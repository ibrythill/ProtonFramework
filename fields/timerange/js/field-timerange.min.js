/**
 * protonThemes Custom Fields JavaScript
 *
 * All JavaScript logic for fields in the post meta box.
 * @since 2.2.3
 *
 */
var timerangetoHHMM = function (timesinput) {
	    var sec_num = parseInt(timesinput, 10)*60; // don't forget the second param
	    var hours   = Math.floor(sec_num / 3600);
	    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
	    var seconds = sec_num - (hours * 3600) - (minutes * 60);

	    if (hours   < 10) {hours   = "0"+hours;}
	    if (minutes < 10) {minutes = "0"+minutes;}
	    if (seconds < 10) {seconds = "0"+seconds;}
	    var time    = hours+':'+minutes;
	    return time;
	}
 	protonFieldMethods.timerange = {
	 	_init: function(element){
			var input = element.find( '.proton_input_timerange' );
			var values = input.attr('value');
			var hours = (parseInt(element.find( '.proton_input_timerange' ).attr('data-hours')) || 24);
			hours = 48 >= hours ? hours : 48;
			var step = (parseInt(element.find( '.proton_input_timerange' ).attr('data-step')) || 10);
			if(values){
				values = values.split(' - ');
				if(values[0].indexOf(':') >= 1){
					minutes1 = values[0].split(':');
					minutes1 = (parseInt(minutes1[0]) * 60) + parseInt(minutes1[1]);
					minutes2 = values[1].split(':');
					minutes2 = (parseInt(minutes2[0]) * 60) + parseInt(minutes2[1]);
					if(minutes2 <= minutes1){
						minutes2 = minutes2 + 1440;
					}
					element.find( '.proton_input_timerange' ).val(minutes1 +' - '+ minutes2).attr('value',minutes1 +' - '+ minutes2);
				}
			}
			element.find( '.proton_input_timerange' ).ionRangeSlider({
				prettify: function (num) {
					if(1440 <= num){
						num = num - 1440;
					}
			        return timerangetoHHMM(num);
			    },
			    input_values_separator:" - ",
			    min: 0,
			    max: hours * 60,
			    type: "double",
			    grid: true,
			    from: 720,
			    to: 1200,
			    grid_num: 36,
			    step: step,
			    onStart: function(obj){
				    var hours1 = Math.floor(obj.from / 60);
		            var minutes1 = obj.from - (hours1 * 60);

		            if(minutes1 == 0) minutes1 = '00';

		            var hours2 = Math.floor(obj.to / 60);
		            var minutes2 = obj.to - (hours2 * 60);

		            if(minutes2 == 0) minutes2 = '00';
		            obj.input.val(hours1+':'+minutes1+' - '+hours2+':'+minutes2 ).attr('value',hours1+':'+minutes1+' - '+hours2+':'+minutes2);

			    },
			    onUpdate: function(obj){
					if(1440 <= obj.from){
						obj.from = obj.from - 1440;
					}if(1440 <= obj.to){
						obj.to = obj.to - 1440;
					}
				    var hours1 = Math.floor(obj.from / 60);
		            var minutes1 = obj.from - (hours1 * 60);

		            if(minutes1 == 0) minutes1 = '00';

		            var hours2 = Math.floor(obj.to / 60);
		            var minutes2 = obj.to - (hours2 * 60);

		            if(minutes2 == 0) minutes2 = '00';

		            input.val(hours1+':'+minutes1+' - '+hours2+':'+minutes2 ).attr('value',hours1+':'+minutes1+' - '+hours2+':'+minutes2);
			    }
			});
		},
		_destroy: function(element){
			if(element.find( '.proton_input_timerange' ).hasClass('irs-hidden-input')){
			var slider = element.find( '.proton_input_timerange' ).data("ionRangeSlider");
			slider.destroy();
			}
		}
 	};
(function ($) {

/**
 * Execute the above methods in the protonthemesCustomFields object.
 *
 * @since 2.2.3
 */
		$(document).ready(function () {
			$( '.proton-field-type-timerange' ).each(function(){
		 		protonFieldMethods.timerange._init($(this));
	 		});
		});



})(jQuery);

