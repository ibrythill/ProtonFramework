/**
 * protonThemes Custom Fields JavaScript
 *
 * All JavaScript logic for fields in the post meta box.
 * @since 2.2.3
 *
 */
(function ($) {
/**
 * setup_wordcounters()
 *
 * @since 2.2.3
 */
protonFieldMethods.map = {
 	_init: function(element){
		//element = element.find('.proton_map_canvas');
		// global "map" variable
		var map_canvas = element.find('.proton_map_canvas');
		var map_lat = element.find('.proton_lat');
		var map_lng = element.find('.proton_lng');
		var map_address = element.find('.proton_address');
		var zoom = parseInt( map_canvas.attr('data-zoom'));

	    var map = null;
	    var marker = null;

	    var geocoder = new google.maps.Geocoder();
	    var optionsSearchBox = {
                        types: ["(cities)"]
                    };
	    var searchBox = new google.maps.places.Autocomplete(map_address[0]);

	    google.maps.event.addListener(searchBox, 'place_changed', function() {
                //places = null;
				//console.log(searchBox);
                var place = searchBox.getPlace();
                var searchLocationPosition = new google.maps.LatLng(place.geometry.location.lat(), place.geometry.location.lng());

				toggleMarker(searchLocationPosition, place, '');

				// populate the form fields with lat & lng
		        formlat = place.geometry.location.lat();
			    map_lat.val(place.geometry.location.lat());
			    formlng = place.geometry.location.lng();
			    map_lng.val(place.geometry.location.lng());

                map.setCenter(place.geometry.location);
                if (place.length == 0) {
                    return;
                }
                map.setZoom(zoom);
            });

	    // popup window for pin, if in use
	    var infowindow = new google.maps.InfoWindow({
	        size: new google.maps.Size(150,50)
	        });

	    // A function to create the marker and set up the event window function
	    function toggleMarker(latlng, name, html) {

		    var contentString = html;
			//null marker
		    if (marker) {
	            marker.setMap(null);
	            marker = null;
	         }
		    marker = new google.maps.Marker({
		        position: latlng,
		        map: map,
		        zIndex: Math.round(latlng.lat()*-100000)<<5
		        });

		    google.maps.event.addListener(marker, 'click', function() {
		       //	infowindow.setContent(contentString);
		        //infowindow.open(map,marker);
		        });

		    google.maps.event.trigger(marker, 'click');
		    return marker;

		}
		// A function to create the marker and set up the event window function
	    function createMarker(latlng, name, html) {

		    var contentString = html;
		    var marker = new google.maps.Marker({
		        position: latlng,
		        map: map,
		        zIndex: Math.round(latlng.lat()*-100000)<<5
		        });

		    google.maps.event.addListener(marker, 'click', function() {
		       //	infowindow.setContent(contentString);
		        //infowindow.open(map,marker);
		        });

		    google.maps.event.trigger(marker, 'click');
		    return marker;

		}
		function geocodePosition(pos) {
		  geocoder.geocode({
		    latLng: pos
		  }, function(responses) {
		    if (responses && responses.length > 0) {
		      map_address.val(responses[0].formatted_address);
		    } else {
		      map_address.val('Cannot determine address at this location.');
		    }
		  });
		}

		function initialize() {

		    // the location of the initial pin
		    var myLatlng = new google.maps.LatLng(map_lat.val(),map_lng.val());
		    geocodePosition(myLatlng);

		    // create the map
		    var myOptions = {
		        zoom: zoom,
		        center: myLatlng,
		        mapTypeControl: true,
		        mapTypeControlOptions: {style: google.maps.MapTypeControlStyle.DROPDOWN_MENU},
		        navigationControl: true,
		        mapTypeId: google.maps.MapTypeId.ROADMAP,
		        styles: [{ featureType: "poi", elementType: "labels", stylers: [{ visibility: "off" }]}]
		    }

		    map = new google.maps.Map(document.getElementById(map_canvas.attr('id')), myOptions);

		    // establish the initial marker/pin
		    toggleMarker(myLatlng, "Property Location", '');

		    // establish the initial div form fields
		    formlat = myLatlng.lat();
		    map_lat.val(myLatlng.lat());
		    formlng = myLatlng.lng();
		    map_lng.val(myLatlng.lng());
		    /*// establish the initial div form fields
		    formlat = document.getElementById(map_lat.attr('id')).value = myLatlng.lat();
			formlng = document.getElementById(map_lng.attr('id')).value = myLatlng.lng();*/

		    // close popup window
		    google.maps.event.addListener(map, 'click', function() {
		        infowindow.close();
		        });

		    // removing old markers/pins
		    google.maps.event.addListener(map, 'click', function(event) {


		        // Information for popup window if you so chose to have one
		        /*
		         marker = createMarker(event.latLng, "name", "<b>Location</b><br>"+event.latLng);
		        */

		        //var image = '/images/googlepins/pin2.png';
		        var myLatLng = event.latLng ;
		        /*
		        var marker = new google.maps.Marker({
		            by removing the 'var' subsquent pin placement removes the old pin icon
		        */
		        toggleMarker(myLatLng, "Property Location", '');

		        // populate the form fields with lat & lng
		        formlat = event.latLng.lat();
			    map_lat.val(event.latLng.lat());
			    formlng = event.latLng.lng();
			    map_lng.val(event.latLng.lng());

			    geocodePosition(myLatLng);

		    });

		}
		initialize();
	},
	_destroy: function(element){

	}
};


		$('.proton-field-type-map').each(function() {

				protonFieldMethods.map._init($(this));

		});



})(jQuery);