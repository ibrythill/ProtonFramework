/**
 * protonThemes Custom Fields JavaScript
 *
 * All JavaScript logic for fields in the post meta box.
 * @since 2.2.3
 *
 */


/*

	$('#animate-clone').cloneya()
        .on('before_clone.cloneya', function (event, toclone) {
            // do something
        })
        .on('after_clone.cloneya', function (event, toclone, newclone) {
            // do something
        })
        .on('before_append.cloneya', function (event, toclone, newclone) {
            $(newclone).css('display', 'none');
            $(toclone).fadeOut('fast', function () {
                $(this).fadeIn('fast');
            });
        })
        .on('after_append.cloneya', function (event, toclone, newclone) {
            $(newclone).slideToggle();
            console.log('finished cloning ' + toclone.attr('id') + ' to ' + newclone.attr('id'));
        })
        .off('remove.cloneya')
        .on('remove.cloneya', function (event, clone) {
            clone.css('background-color', 'red');

            $(clone).slideToggle('slow', function () {
                $(clone).remove();
            });

        })
        .on('after_delete.cloneya', function () {
            console.log('deleted');
        });

 */


(function ($) {

	protonFieldMethods.combo = {
	 	_init: function(element){
			element.find('.proton-multi-field').each(function($field){
				var _this = $(this);
				if(typeof protonFieldMethods[_this.attr('data-field-type')] !== "undefined"){
					protonFieldMethods[_this.attr('data-field-type')]._init(_this);
				}
			});
					},
		_destroy: function(element){

		}
 	};

	$(document).ready(function () {
		$( '.proton-field-type-combo' ).each(function() {
			protonFieldMethods.combo._init($(this));
 		});

	});

})(jQuery);