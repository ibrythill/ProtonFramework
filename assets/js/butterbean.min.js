window.butterbean=window.butterbean||{},function(){
// Bail if we don't have the JSON, which is passed in via `wp_localize_script()`.
if(!_.isUndefined(butterbean_data)){
/**
	 * Our global object.  The `butterbean` object is just a wrapper to house everything
	 * in a single namespace.
	 *
	 * @since  1.0.0
	 * @access public
	 * @var    object
	 */
var o=butterbean={
/**
		 * Houses the manager, section, and control views based on the `type`.
		 *
		 * @since  1.0.0
		 * @access public
		 * @var    object
		 */
views:{managers:{},sections:{},controls:{}},
/**
		 * Houses the manager, section, and control templates based on the `type`.
		 *
		 * @since  1.0.0
		 * @access public
		 * @var    object
		 */
templates:{managers:{},sections:{},controls:{}}};
/**
	 * Creates a new manager view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */o.views.register_manager=function(e,t){"default"!==e&&(this.managers[e]=this.managers.default.extend(t))},
/**
	 * Returns a manager view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return object
	 */
o.views.get_manager=function(e){return this.manager_exists(e)?this.managers[e]:this.managers.default},
/**
	 * Removes a manager view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.views.unregister_manager=function(e){"default"!==e&&this.manager_exists(e)&&delete this.managers[e]},
/**
	 * Checks if a manager view exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.views.manager_exists=function(e){return this.managers.hasOwnProperty(e)},
/**
	 * Creates a new section view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */
o.views.register_section=function(e,t){"default"!==e&&(this.sections[e]=this.sections.default.extend(t))},
/**
	 * Returns a section view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return object
	 */
o.views.get_section=function(e){return this.section_exists(e)?this.sections[e]:this.sections.default},
/**
	 * Removes a section view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.views.unregister_section=function(e){"default"!==e&&this.section_exists(e)&&delete this.sections[e]},
/**
	 * Checks if a section view exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.views.section_exists=function(e){return this.sections.hasOwnProperty(e)},
/**
	 * Creates a new control view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */
o.views.register_control=function(e,t){"default"!==e&&(this.controls[e]=this.controls.default.extend(t))},
/**
	 * Returns a control view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return object
	 */
o.views.get_control=function(e){return this.control_exists(e)?this.controls[e]:this.controls.default},
/**
	 * Removes a control view.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.views.unregister_control=function(e){"default"!==e&&this.control_exists(e)&&delete this.controls[e]},
/**
	 * Checks if a control view exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.views.control_exists=function(e){return this.controls.hasOwnProperty(e)},
/**
	 * Creates a new manager template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */
o.templates.register_manager=function(e){this.managers[e]=wp.template("proton-opt-manager-"+e)},
/**
	 * Returns a manager template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return function
	 */
o.templates.get_manager=function(e){return!!this.manager_exists(e)&&this.managers[e]},
/**
	 * Removes a manager template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.templates.unregister_manager=function(e){this.manager_exists(e)&&delete this.managers[e]},
/**
	 * Checks if a manager template exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.templates.manager_exists=function(e){return this.managers.hasOwnProperty(e)},
/**
	 * Creates a new section template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */
o.templates.register_section=function(e){this.sections[e]=wp.template("proton-opt-section-"+e)},
/**
	 * Returns a section template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return function
	 */
o.templates.get_section=function(e){return!!this.section_exists(e)&&this.sections[e]},
/**
	 * Removes a section template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.templates.unregister_section=function(e){this.section_exists(e)&&delete this.sections[e]},
/**
	 * Checks if a section template exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.templates.section_exists=function(e){return this.sections.hasOwnProperty(e)},
/**
	 * Creates a new control template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @param  object  $args
	 * @return void
	 */
o.templates.register_control=function(e){this.controls[e]=wp.template("proton-opt-control-"+e)},
/**
	 * Returns a control template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return function
	 */
o.templates.get_control=function(e){return!!this.control_exists(e)&&this.controls[e]},
/**
	 * Removes a control template.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return void
	 */
o.templates.unregister_control=function(e){this.control_exists(e)&&delete this.controls[e]},
/**
	 * Checks if a control template exists.
	 *
	 * @since  1.0.0
	 * @access public
	 * @param  string  $type
	 * @return bool
	 */
o.templates.control_exists=function(e){return this.controls.hasOwnProperty(e)},
/**
	 * Renders our managers, sections, and controls.
	 *
	 * @since  1.0.0
	 * @access private
	 * @return void
	 */
o.render=function(){
// Loop through each of the managers and render their api.views.
_.each(butterbean_data.managers,function(e){
// Create a new manager model with the JSON data for the manager.
var t=new r(e),n,i=new(o.views.get_manager(e.type))({model:t}),s=document.getElementById("proton-opt-ui-"+t.get("name"));
// Get the manager view callback.
// Add the `.butterbean-ui` class to the meta box.
s.className+=" proton-opt-ui theme-Blue-Grey",
// Render the manager view.
s.querySelector(".inside").appendChild(i.render().el),
// Render the manager subviews.
i.subview_render(),
// Call the view's ready method.
i.ready()})};
/* === Templates === */
// Nav template.
var e=wp.template("proton-opt-nav"),r=Backbone.Model.extend({defaults:{name:"",type:"",sections:{},controls:{}}}),n=Backbone.Model.extend({defaults:{name:"",type:"",label:"",description:"",icon:"",manager:"",active:"",selected:!1}}),s=Backbone.Model.extend({defaults:{name:"",type:"",label:"",description:"",icon:"",value:"",choices:{},attr:"",active:"",manager:"",section:"",setting:""}}),i=Backbone.Collection.extend({model:n});
/* === Models === */
// Manager model (each manager is housed within a meta box).
/* === Views === */
/**
	 * The default manager view.  Other views can extend this using the
	 * `butterbean.views.register_manager()` function.
	 *
	 * @since  1.0.0
	 * @access public
	 * @var    object
	 */
o.views.managers.default=Backbone.View.extend({
// Wrapper element for the manager view.
tagName:"div",
// Adds some custom attributes to the wrapper.
attributes:function(){return{id:"proton-opt-manager-"+this.model.get("name"),class:"proton-opt-manager proton-opt-manager-"+this.model.get("type")}},
// Initializes the view.
initialize:function(){var e=this.model.get("type");
// If there's not yet a template for this manager type, create it.
o.templates.manager_exists(e)||o.templates.register_manager(e),
// Get the manager template.
this.template=o.templates.get_manager(e)},
// Renders the manager.
render:function(){return this.el.innerHTML=this.template(this.model.toJSON()),console.log(this.model.toJSON()),this},
// Renders the manager's sections and controls.
// Important! This may change drastically in the future, possibly even
// taken out of the manager view altogether.  It's for this reason that
// it's not recommended to create custom views for managers right now.
subview_render:function(){
// Create a new section collection.
var t=new i;
// Loop through each section and add it to the collection.
return _.each(this.model.get("sections"),function(e){t.add(new n(e))}),
// Loop through each section in the collection and render its view.
t.forEach(function(e,t){
// Create a new nav item view for the section.
var n=new a({model:e});
// Render the nav item view.
document.querySelector("#proton-opt-ui-"+e.get("manager")+" .proton-opt-nav").appendChild(n.render().el);
// Get the section view callback.
var i,s=new(o.views.get_section(e.attributes.type))({model:e});
// Create a new section view.
// Render the section view.
document.querySelector("#proton-opt-ui-"+e.get("manager")+" .proton-opt-content").appendChild(s.render().el),
// Call the section view's ready method.
s.ready(),
// If the first model, set it to selected.
e.set("selected",0===t)},this),
// Loop through each control for the manager and render its view.
_.each(this.model.get("controls"),function(e){
// Create a new control model.
var t=new s(e),n,i=new(o.views.get_control(e.type))({model:t});
// Get the control view callback.
// Render the view.
document.getElementById("proton-opt-"+t.get("manager")+"-section-"+t.get("section")).appendChild(i.render().el),
// Call the view's ready method.
i.ready()}),this},
// Function that is executed *after* the view has been rendered.
// This is meant to be overwritten in sub-views.
ready:function(){}}),
/**
	 * The default section view.  Other views can extend this using the
	 * `butterbean.views.register_section()` function.
	 *
	 * @since  1.0.0
	 * @access public
	 * @var    object
	 */
o.views.sections.default=Backbone.View.extend({
// Wrapper element for the section.
tagName:"div",
// Adds custom attributes for the section wrapper.
attributes:function(){return{id:"proton-opt-"+this.model.get("manager")+"-section-"+this.model.get("name"),class:"proton-opt-section proton-opt-section-"+this.model.get("type"),"aria-hidden":!this.model.get("selected")}},
// Initializes the view.
initialize:function(){
// Add an event for when the model changes.
this.model.on("change",this.onchange,this);
// Get the section type.
var e=this.model.get("type");
// If there's no template for this section type, create it.
o.templates.section_exists(e)||o.templates.register_section(e),
// Gets the section template.
this.template=o.templates.get_section(e)},
// Renders the section.
render:function(){
// Only render template if model is active.
return this.model.get("active")&&(this.el.innerHTML=this.template(this.model.toJSON())),this},
// Executed when the model changes.
onchange:function(){
// Set the view's `aria-hidden` attribute based on whether the model is selected.
this.el.setAttribute("aria-hidden",!this.model.get("selected"))},
// Function that is executed *after* the view has been rendered.
// This is meant to be overwritten in sub-views.
ready:function(){}});
/**
	 * The nav item view for each section.
	 *
	 * @since  1.0.0
	 * @access public
	 * @var    object
	 */
var a=Backbone.View.extend({
// Sets the template used.
template:e,
// Wrapper element for the nav item.
tagName:"li",
// Sets some custom attributes for the nav item wrapper.
attributes:function(){return{class:"theme-"+this.model.get("theme"),"data-theme":this.model.get("theme"),"aria-selected":this.model.get("selected")}},
// Initializes the nav item view.
initialize:function(){this.model.on("change",this.render,this),this.model.on("change",this.onchange,this)},
// Renders the nav item.
render:function(){
// Only render template if model is active.
return this.model.get("active")&&(this.el.innerHTML=this.template(this.model.toJSON())),this},
// Custom events.
events:{"click a":"onselect"},
// Executed when the section model changes.
onchange:function(){
// Set the `aria-selected` attibute based on the model selected state.
this.el.setAttribute("aria-selected",this.model.get("selected"))},
// Executed when the link for the nav item is clicked.
onselect:function(e){e.preventDefault(),
// Loop through each of the models in the collection and set them to inactive.
_.each(this.model.collection.models,function(e){e.set("selected",!1)},this),
// Set this view's model to selected.
this.model.set("selected",!0),jQuery(this.el).parent().find(".livicon").updateLivicon(),jQuery(this.el).parents(".proton-opt-ui").removeClassPrefix("theme-").addClass("theme-"+this.model.get("theme")),console.log(this.model)}});
/**
	 * The default control view.  Other views can extend this using the
	 * `butterbean.views.register_control()` function.
	 *
	 * @since  1.0.0
	 * @access public
	 * @var    object
	 */o.views.controls.default=Backbone.View.extend({
// Wrapper element for the control.
tagName:"div",
// Custom attributes for the control wrapper.
attributes:function(){return{id:"proton-opt-control-"+this.model.get("name"),class:"proton-opt-control proton-opt-control-"+this.model.get("type")}},
// Initiazlies the control view.
initialize:function(){var e=this.model.get("type");
// Only add a new control template if we have a different control type.
o.templates.control_exists(e)||o.templates.register_control(e),
// Get the control template.
this.template=o.templates.get_control(e),
// Bind changes so that the view is re-rendered when the model changes.
_.bindAll(this,"render"),this.model.bind("change",this.render)},
// Renders the control template.
render:function(){
// Only render template if model is active.
return this.model.get("active")&&(this.el.innerHTML=this.template(this.model.toJSON())),this},
// Function that is executed *after* the view has been rendered.
// This is meant to be overwritten in sub-views.
ready:function(){}}),
/**
	 * Adds the color control view.
	 *
	 * @since  1.0.0
	 */
o.views.register_control("color",{
// Calls the core WP color picker for the control's input.
ready:function(){var e=this.model.attributes.options;jQuery(this.$el).find(".proton-opt-color-picker").wpColorPicker(e)}}),
/**
	 * Adds the color palette view.
	 *
	 * @since  1.0.0
	 */
o.views.register_control("palette",{
// Adds custom events.
events:{"change input":"onselect"},
// Executed when one of the color palette's value has changed.
// These are radio inputs.
onselect:function(){
// Get the value of the input.
var n=document.querySelector("#"+this.el.id+" input:checked").getAttribute("value"),e=this.model.get("choices");
// Get all choices.
// Loop through choices and change the selected value.
_.each(e,function(e,t){e.selected=t===n}),
// Because `choices` is an array, it's not recognized as a change.  So, we
// have to manually trigger a change here so that the view gets re-rendered.
this.model.set("choices",e).trigger("change",this.model)}}),
/**
	 * Adds the image control view.
	 *
	 * @since  1.0.0
	 */
o.views.register_control("image",{
// Adds custom events.
events:{"click .proton-opt-add-media":"showmodal","click .proton-opt-change-media":"showmodal","click .proton-opt-remove-media":"removemedia"},
// Executed when the show modal button is clicked.
showmodal:function(){
// If we already have a media modal, open it.
_.isUndefined(this.media_modal)?(
// Create a new media modal.
this.media_modal=wp.media({frame:"select",multiple:!1,editing:!0,title:this.model.get("l10n").choose,library:{type:"image"},button:{text:this.model.get("l10n").set}}),
// Runs when an image is selected in the media modal.
this.media_modal.on("select",function(){
// Gets the JSON data for the first selection.
var e=this.media_modal.state().get("selection").first().toJSON(),t=this.model.attributes.size;
// Size of image to display.
// Updates the model for the view.
this.model.set({src:e.sizes[t]?e.sizes[t].url:e.url,alt:e.alt,value:e.id})},this),
// Opens the media modal.
this.media_modal.open(),jQuery(this.el).parent().find(".livicon").updateLivicon()):this.media_modal.open()},
// Executed when the remove media button is clicked.
removemedia:function(){
// Updates the model for the view.
this.model.set({src:"",alt:"",value:""}),jQuery(this.el).parent().find(".livicon").updateLivicon()}})}}();