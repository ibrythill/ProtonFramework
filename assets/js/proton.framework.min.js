// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
function debounce(i,a,o){var u;return function(){var e=this,r=arguments,n=function(){u=null,o||i.apply(e,r)},t=o&&!u;clearTimeout(u),u=setTimeout(n,a),t&&i.apply(e,r)}}!function(r){
// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
function e(i,a,o){var u;return function(){var e=this,r=arguments,n=function(){u=null,o||i.apply(e,r)},t=o&&!u;clearTimeout(u),u=setTimeout(n,a),t&&i.apply(e,r)}}
//events for start and stop resizing
var n=250,t=null,i=null,a,o=!1;a=function(){o=!1,r(window).trigger("resizeend",i)},r(window).on("resize",function(e){i=e||i,clearTimeout(t),o||(r(window).trigger("resizestart",i),o=!0),t=setTimeout(a,n)});var u={Android:function(){return navigator.userAgent.match(/Android/i)},BlackBerry:function(){return navigator.userAgent.match(/BlackBerry/i)},iOS:function(){return navigator.userAgent.match(/iPhone|iPad|iPod/i)},Opera:function(){return navigator.userAgent.match(/Opera Mini/i)},Windows:function(){return navigator.userAgent.match(/IEMobile/i)||navigator.userAgent.match(/WPDesktop/i)},any:function(){return u.Android()||u.BlackBerry()||u.iOS()||u.Opera()||u.Windows()}}}(jQuery);var isMobile={Android:function(){return navigator.userAgent.match(/Android/i)},BlackBerry:function(){return navigator.userAgent.match(/BlackBerry/i)},iOS:function(){return navigator.userAgent.match(/iPhone|iPad|iPod/i)},Opera:function(){return navigator.userAgent.match(/Opera Mini/i)},Windows:function(){return navigator.userAgent.match(/IEMobile/i)||navigator.userAgent.match(/WPDesktop/i)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Opera()||isMobile.Windows()}},_element=document.getElementsByClassName("lazyload");require(["jquery"],function(r){r("img.svg, .svg img").each(function(){var n=jQuery(this),t=n.attr("id"),i=n.attr("class"),e=n.attr("src");r.get(e,function(e){
// Get the SVG tag, ignore the rest
var r=jQuery(e).find("svg");
// Add replaced image's ID to the new SVG
void 0!==t&&(r=r.attr("id",t)),
// Add replaced image's classes to the new SVG
void 0!==i&&(r=r.attr("class",i+" replaced-svg")),
// Remove any invalid XML tags as per http://validator.w3.org
r=r.removeAttr("xmlns:a"),
// Replace image with new SVG
n.replaceWith(r)},"xml")});
//events for start and stop resizing
var n=250,t=null,i=null,a,o=!1;a=function(){o=!1,r(window).trigger("resizeend",i)},r(window).on("resize",function(e){i=e||i,clearTimeout(t),o||(r(window).trigger("resizestart",i),o=!0),t=setTimeout(a,n)})}),
/*require(["jquery","backgroundcheck"], function($, BackgroundCheck) {
	$(document).ready(function(){


		var smart_target = '.proton-color', smart_image = '.proton-color-bg img';
		if($(smart_image).length){
			BackgroundCheck.init({
			  targets: smart_target,
			  images: smart_image
			});
		    var update = function(){
		        BackgroundCheck.refresh();
		    };

		    // Note: Instead of waiting for all images until we initialize the widget
		    // we use event capturing to update the widget's layout progressively.
		    this.addEventListener('load', update, true);
			//BackgroundCheck.refresh();
		}
	});

});*/
require(["jquery","lightGallery"],function(e,r){e("body").not(".gallery").lightGallery({selector:"a[rel^='protonGallery']",showThumbByDefault:!1}),e("a[rel^='proton']").lightGallery({selector:"this"}),e(".gallery").lightGallery({selector:"a",hash:!1,showThumbByDefault:!1})});